package kr.pe.constr.webservice.consumer.stub;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.0.0
 * 2014-05-28T16:58:19.266+09:00
 * Generated source version: 3.0.0
 * 
 */
@WebServiceClient(name = "RndProviderImplService", 
                  wsdlLocation = "http://localhost:9080/webservice/RndProvider?wsdl",
                  targetNamespace = "http://webservice.constr.pe.kr/") 
public class RndProviderImplService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://webservice.constr.pe.kr/", "RndProviderImplService");
    public final static QName RndProviderImplPort = new QName("http://webservice.constr.pe.kr/", "RndProviderImplPort");
    static {
        URL url = null;
        try {
            url = new URL("http://localhost:9080/webservice/RndProvider?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(RndProviderImplService.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "http://localhost:9080/webservice/RndProvider?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public RndProviderImplService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public RndProviderImplService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public RndProviderImplService() {
        super(WSDL_LOCATION, SERVICE);
    }
    
     

    /**
     *
     * @return
     *     returns RndProvider
     */
    @WebEndpoint(name = "RndProviderImplPort")
    public RndProvider getRndProviderImplPort() {
        return super.getPort(RndProviderImplPort, RndProvider.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns RndProvider
     */
    @WebEndpoint(name = "RndProviderImplPort")
    public RndProvider getRndProviderImplPort(WebServiceFeature... features) {
        return super.getPort(RndProviderImplPort, RndProvider.class, features);
    }

}
